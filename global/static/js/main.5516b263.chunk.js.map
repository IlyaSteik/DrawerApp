{"version":3,"sources":["js/utils.js","js/socket.js","apps/Drawing/Global.js","index.js"],"names":["getUrlParams","window","location","search","length","JSON","parse","decodeURI","substring","replace","Socket","this","onConnect","bind","onDisconnect","onConnectionError","getSocket","callback","socket","on","method","params","emit","event","events","removeAllListeners","url","query","connect","openSocket","path","transports","reconnection","Drawing","props","state","lobbies","maxOnline","minOnline","currentOnline","urlParams","connected","componentDidMount","bridge","send","unsubscribe","subscribe","r","console","log","setState","e","setTimeout","a","lobbyId","end","gameId","word","winnerId","data","x0","y0","x1","y1","color","drawLine","getContext","clearRect","Math","max","count","min","call","canvas","canvasContext","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath","popout","manage_elements","view_games","activePanel","id","separator","viewWidth","ViewWidth","MOBILE","className","style","width","icon","header","subheader","actions","size","onClick","disconnect","actionsLayout","mode","after","getRef","ref","manage_elements_ref","onChange","click","view_games_ref","Object","keys","map","value","index","display","key","Fragment","nom","toUpperCase","fill","isReported","game_id","isLiked","response","vk_user_id","before","height","user_id","status","gaveTag","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5516b263.chunk.js","sourcesContent":["import {default as bridge} from '@vkontakte/vk-bridge';\r\n\r\nexport function convertTextToLines(text, font, max_width) {\r\n    const\r\n        {createCanvas} = require('canvas'),\r\n        canvas = createCanvas(1080, 1920),\r\n        ctx = canvas.getContext('2d')\r\n    ;\r\n    ctx.font = font;\r\n    let width = 0, lines = [], result, i, j;\r\n\r\n    while (text.length) {\r\n        for (i = text.length; ctx.measureText(text.substr(0, i)).width > max_width; i--) ;\r\n        result = text.substr(0, i);\r\n\r\n        if (i !== text.length)\r\n\r\n            for (j = 0; result.indexOf(' ', j) !== -1; j = result.indexOf(' ', j) + 1) ;\r\n        lines.push(result.substr(0, j || result.length));\r\n\r\n        width = Math.max(width, ctx.measureText(lines[lines.length - 1]).width);\r\n        text = text.substr(lines[lines.length - 1].length, text.length);\r\n    }\r\n\r\n    return lines;\r\n}\r\n\r\nexport async function get(url, params) {\r\n    const\r\n        query = params ? '?' + Object.keys(params).map((value) =>\r\n            encodeURIComponent(value) + '=' + encodeURIComponent(params[value])\r\n        ).join('&') : '',\r\n        url_ = `${url}${query}`;\r\n    return await new Promise((res, rej) => {\r\n        fetch(url_, {method: 'GET'})\r\n            .then(res =>\r\n                res.json()\r\n            )\r\n            .then(answer =>\r\n                res(answer)\r\n            ).catch(err =>\r\n            res({error: {code: -1, text: err.toString()}})\r\n        );\r\n    });\r\n}\r\n\r\nexport const defaultFonts = [\r\n    'SF Pro Text',\r\n    'SF Pro Text Heavy',\r\n    'SF Pro Text Semibold',\r\n    'SF Pro Display',\r\n    'SF Pro Display Bold',\r\n    'SF Pro Display Semibold',\r\n    'SF Pro Display Medium',\r\n    'SF Pro Rounded',\r\n    'SF Pro Rounded Semibold',\r\n    'SF Pro Rounded Bold',\r\n    'SF UI Display',\r\n    'SF UI Text',\r\n    'TT Commons',\r\n    'TT Commons Bold',\r\n    'TT Commons Demibold',\r\n    'Manrope ExtraBold'\r\n];\r\n\r\nexport function loadFonts(fonts = defaultFonts) {\r\n    for (const font of fonts) {\r\n        const span = document.createElement('span');\r\n        span.style.fontFamily = font;\r\n        span.innerText = '.';\r\n        document.body.appendChild(span);\r\n        setTimeout(() => span.remove(), 1);\r\n    }\r\n}\r\n\r\nexport function animateValue(obj, start, end, duration) {\r\n    if (start === end || end - start === 1) {\r\n        obj.innerHTML = end;\r\n    } else {\r\n        let startTimestamp = null;\r\n        const step = (timestamp) => {\r\n            if (!startTimestamp) startTimestamp = timestamp;\r\n            const progress = Math.min((timestamp - startTimestamp) / duration, 1);\r\n            obj.innerHTML = Math.floor(progress * (end - start) + start);\r\n            if (progress < 1) {\r\n                window.requestAnimationFrame(step);\r\n            }\r\n        };\r\n        window.requestAnimationFrame(step);\r\n    }\r\n}\r\n\r\nexport function cps(array) {\r\n    if (array.length !== 0) {\r\n        let\r\n            first_date = array[0],\r\n            cur_pos = 0,\r\n            clicks_per_second = []\r\n        ;\r\n        array = array.map(value => value - first_date);\r\n\r\n        for (const click of array) {\r\n            cur_pos = click < 1000 ? 0 : parseInt((click + '').substring(0, (click + '').length - 3));\r\n            clicks_per_second[cur_pos] = clicks_per_second[cur_pos] > 0 ? clicks_per_second[cur_pos] + 1 : 1;\r\n        }\r\n\r\n        clicks_per_second = clicks_per_second.filter(value => value > 0);\r\n\r\n        const\r\n            max_cps = Math.max(...clicks_per_second),\r\n            min_cps = Math.min(...clicks_per_second),\r\n            mid_cps = Math.ceil((max_cps + min_cps) / 2)\r\n        ;\r\n        return {max_cps, min_cps, mid_cps};\r\n    } else {\r\n        return {max_cps: 0, min_cps: 0, mid_cps: 0};\r\n    }\r\n}\r\n\r\nfunction componentToHex(c) {\r\n    const hex = c.toString(16);\r\n    return hex.length == 1 ? '0' + hex : hex;\r\n}\r\n\r\nexport function rgbToHex(r, g, b) {\r\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n}\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function decOfNum(number, titles, needNumber = true) {\r\n    if (number !== undefined) {\r\n        let decCache = [],\r\n            decCases = [2, 0, 1, 1, 1, 2];\r\n        if (!decCache[number]) decCache[number] = number % 100 > 4 && number % 100 < 20 ? 2 : decCases[Math.min(number % 10, 5)];\r\n        return (needNumber ? number + ' ' : '') + titles[decCache[number]];\r\n    }\r\n}\r\n\r\nexport function numToStr(number) {\r\n    if (number > 0 && number <= 10) {\r\n        const words = [\r\n            'первое', 'второе', 'третье', 'четвертое', 'пятое', 'шестое', 'седьмое', 'восьмое', 'девятое', 'десятое'\r\n        ];\r\n        return words[number - 1];\r\n    } else {\r\n        return number + '';\r\n    }\r\n}\r\n\r\nexport function shortIntegers(int) {\r\n    try {\r\n        return int.toString().replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\r\n    } catch (e) {\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function getRandomInts(min, max, count) {\r\n    const array = [];\r\n    for (let i = 0; i < count; i++) {\r\n        const int = getRandomInt(min, max);\r\n        if (array.indexOf(int) === -1) {\r\n            array.push(int);\r\n        } else {\r\n            if (max >= count)\r\n                i--;\r\n            else\r\n                array.push(int);\r\n        }\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function nodeToString(node) {\r\n    let tmpNode = document.createElement(\"div\");\r\n    tmpNode.appendChild(node.cloneNode(true));\r\n    let str = tmpNode.innerHTML;\r\n    tmpNode = node = null;\r\n    return str;\r\n}\r\n\r\nexport function convertMiliseconds(miliseconds) {\r\n    let hours, minutes, total_hours, total_minutes, total_seconds;\r\n\r\n    total_seconds = parseInt(Math.floor(miliseconds / 1000));\r\n    total_minutes = parseInt(Math.floor(total_seconds / 60));\r\n    total_hours = parseInt(Math.floor(total_minutes / 60));\r\n\r\n    minutes = parseInt(total_minutes % 60);\r\n    hours = parseInt(total_hours % 24);\r\n\r\n    return hours + 'ч. ' + minutes + 'мин.';\r\n}\r\n\r\nexport function convertMsToNormalTime(miliseconds) {\r\n    let hours, minutes, seconds, total_hours, total_minutes, total_seconds;\r\n\r\n    total_seconds = parseInt(Math.floor(miliseconds / 1000));\r\n    total_minutes = parseInt(Math.floor(total_seconds / 60));\r\n    total_hours = parseInt(Math.floor(total_minutes / 60));\r\n\r\n    seconds = parseInt(total_seconds % 60);\r\n    minutes = parseInt(total_minutes % 60);\r\n    hours = parseInt(total_hours % 24);\r\n\r\n    return {hours, minutes, seconds};\r\n}\r\n\r\nconst getImage = (src) =>\r\n    new Promise((res, rej) => {\r\n        const image = new Image();\r\n\r\n        image.onload = () => res(image);\r\n        image.crossOrigin = 'anonymous';\r\n        image.onstalled = (e) => {\r\n            console.log('Failed to fetch data, but trying.', e);\r\n            rej(e);\r\n        };\r\n        image.onerror = (e) => {\r\n            console.log('Failed to fetch data, error.', e);\r\n            rej(e);\r\n        };\r\n        image.src = src;\r\n    });\r\n\r\nexport async function toBlob(object, dataUrl = true) {\r\n    const\r\n        myCanvas = document.createElement('canvas'),\r\n        ctxt = myCanvas.getContext('2d');\r\n\r\n    let base = typeof object === 'string' ? object : window.btoa(object);\r\n    const img = await getImage(typeof object === 'string' ? base : `data:image/svg+xml;base64,${base}`);\r\n    myCanvas.height = img.height;\r\n    myCanvas.width = img.width;\r\n    if (ctxt === null) {\r\n        return \"\";\r\n    }\r\n    ctxt.drawImage(img, 0, 0, img.width, img.height);\r\n    return dataUrl ? myCanvas.toDataURL() : myCanvas;\r\n}\r\n\r\nexport function getUrlParams() {\r\n    return window.location.search.length > 0 && JSON.parse('{\"' + decodeURI(window.location.search.substring(1)).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}');\r\n}\r\n\r\nexport const platforms = {\r\n    desktop_web: /desktop_web/g,\r\n    mobile_android: /mobile_android/g,\r\n    mobile_android_messenger: /mobile_android_messenger/g,\r\n    mobile_ipad: /mobile_ipad/g,\r\n    mobile_iphone: /mobile_iphone/g,\r\n    mobile_iphone_messenger: /mobile_iphone_messenger/g,\r\n    mobile_web: /mobile_web/g,\r\n\r\n    android: /mobile_android|mobile_android_messenger/g,\r\n    ios: /mobile_ipad|mobile_iphone|mobile_iphone_messenger/g\r\n};\r\n\r\nexport function isPlatformIOS() {\r\n    return getUrlParams().vk_platform === 'mobile_iphone';\r\n}\r\n\r\nexport function isPlatformAndroid() {\r\n    return platforms.android.test(getUrlParams().vk_platform);\r\n}\r\n\r\nexport function isPlatformDesktop() {\r\n    return getUrlParams().vk_platform === 'desktop_web';\r\n}\r\n\r\nexport let\r\n    vk_local_users = {},\r\n    name_cases = ['first_name', 'last_name', 'first_name_dat', 'first_name_nom', 'first_name_gen', 'first_name_acc', 'first_name_ins', 'first_name_abl', 'last_name_dat', 'last_name_nom', 'last_name_gen', 'last_name_acc', 'last_name_ins', 'last_name_abl']\r\n;\r\n\r\nexport async function getVKUsers(ids) {\r\n    const\r\n        user_ids = [\r\n            ...new Set(\r\n                ids\r\n                    .filter(value => vk_local_users[value] === undefined)\r\n                    .map(\r\n                        value => typeof value === 'number' ? value : value.replace('@', '')\r\n                            .replace('id', '')\r\n                            .replace('vk.com/', '')\r\n                            .replace('http://', '')\r\n                            .replace('https://', '')\r\n                    )\r\n            )\r\n        ],\r\n        i = Math.floor(user_ids.length / 100)\r\n    ;\r\n\r\n    if (user_ids.length > 0) {\r\n        let users = [];\r\n\r\n        for (let j = 0; j < i + 1; j++) {\r\n            users = users.concat(\r\n                await vkApiRequest('users.get', {\r\n                    user_ids: user_ids.slice(j * 100, j * 100 + 100).join(','),\r\n                    fields: ['screen_name', 'photo_100', 'photo_200', 'photo_max_orig', 'sex', ...name_cases].join(',')\r\n                })\r\n            );\r\n        }\r\n\r\n        for (const user of users) {\r\n            vk_local_users[user.id] = user;\r\n        }\r\n    }\r\n\r\n    return ids.map(value => vk_local_users[value] || vk_local_users[Object.keys(vk_local_users).find(key => vk_local_users[key].screen_name === value)]);\r\n}\r\n\r\nexport async function vkApiRequest(method, params = {}) {\r\n    return (await bridge.send('VKWebAppCallAPIMethod', {\r\n        method,\r\n        params: {\r\n            ...params,\r\n            v: '5.126',\r\n            access_token: params.access_token || '7a8d6dcc7a8d6dcc7a8d6dcc637afa8f4477a8d7a8d6dcc1b06a888634e406617b4aef3'\r\n        }\r\n    })).response\r\n}\r\n\r\nexport function viewportToPixels(value) {\r\n    const\r\n        parts = value.match(/([0-9\\.]+)(vh|vw)/),\r\n        q = Number(parts[1]),\r\n        side = window[['innerHeight', 'innerWidth'][['vh', 'vw'].indexOf(parts[2])]]\r\n    ;\r\n    return side * (q / 100)\r\n}\r\n\r\nexport function openUrl(url) {\r\n    const element = document.createElement('a');\r\n    element.href = url;\r\n    element.target = '_blank';\r\n    element.click();\r\n    element.remove();\r\n}\r\n\r\nexport function getUrlLocation() {\r\n    return window.location.origin + window.location.pathname.replace('/index.html', '');\r\n}\r\n\r\nexport function getSrcUrl(resource) {\r\n    return getUrlLocation() + resource.substring(1);\r\n}\r\n\r\nexport async function getBase64Image(imageUri) {\r\n    const\r\n        canvas = document.createElement('canvas'),\r\n        ctx = canvas.getContext('2d'),\r\n        img = new Image()\r\n    ;\r\n    img.src = 'https://murmuring-bastion-20764.herokuapp.com/' + imageUri;\r\n    img.crossOrigin = 'Anonymous';\r\n    return await new Promise(resolve =>\r\n        img.onload = function () {\r\n            canvas.width = this.width;\r\n            canvas.height = this.height;\r\n            ctx.drawImage(img, 0, 0, this.width, this.height);\r\n            resolve(canvas.toDataURL('image/png'));\r\n        }\r\n    );\r\n}\r\n\r\nexport function appendScript(code) {\r\n    let\r\n        container = document.getElementById('advert_container'),\r\n        script = document.createElement('script')\r\n    ;\r\n    script.innerHTML = code;\r\n    if (container === null) {\r\n        container = document.createElement('div');\r\n        container.id = 'advert_container';\r\n        document.body.appendChild(container);\r\n    }\r\n    container.innerHTML = '';\r\n    setTimeout(() => {\r\n        container.appendChild(script);\r\n    }, 400);\r\n}","import openSocket from \"socket.io-client\";\r\n\r\nclass Socket {\r\n    constructor() {\r\n        this.onConnect = this.onConnect.bind(this);\r\n        this.onDisconnect = this.onDisconnect.bind(this);\r\n        this.onConnectionError = this.onConnectionError.bind(this);\r\n        this.getSocket = this.getSocket.bind(this);\r\n    }\r\n\r\n    onConnect(callback) {\r\n        this.socket.on('connect', callback);\r\n    }\r\n\r\n    onDisconnect(callback) {\r\n        this.socket.on('disconnect', callback);\r\n    }\r\n\r\n    onConnectionError(callback) {\r\n        this.socket.on('connect_error', callback);\r\n    }\r\n\r\n    call(method, params, callback) {\r\n        this.socket.emit(method, params, callback);\r\n    }\r\n\r\n    subscribe(event, callback) {\r\n        this.socket.on(event, callback);\r\n    }\r\n\r\n    unsubscribe(...events) {\r\n        for (const event of events) {\r\n            this.socket.removeAllListeners(event);\r\n        }\r\n    }\r\n\r\n    connect(url, query) {\r\n        if (this.socket) {\r\n            this.socket.connect();\r\n        } else {\r\n            this.socket = openSocket.connect(url, {\r\n                path: '/socket.io',\r\n                query,\r\n                transports: ['websocket', 'polling', 'flashsocket'],\r\n                reconnection: false\r\n            });\r\n        }\r\n    }\r\n\r\n    getSocket() {\r\n        return this.socket;\r\n    }\r\n}\r\n\r\nexport default Socket;","import React from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport '../../css/Drawing/Global.css';\r\n\r\nimport {getUrlParams} from \"../../js/utils\";\r\nimport {\r\n    Panel,\r\n    View,\r\n    PanelHeader,\r\n    ActionSheet,\r\n    ActionSheetItem,\r\n    Group,\r\n    Div,\r\n    UsersStack,\r\n    AdaptivityProvider,\r\n    ModalCardBase,\r\n    ViewWidth,\r\n    Button, Switch, ScreenSpinner, Snackbar\r\n} from '@vkontakte/vkui';\r\n\r\nimport Socket from '../../js/socket';\r\nimport {\r\n    Icon20AchievementCircleFillBlue,\r\n    Icon24Like,\r\n    Icon28ReportOutline,\r\n    Icon28ShareOutline,\r\n    Icon56PaletteOutline,\r\n    Icon56Users3Outline\r\n} from \"@vkontakte/icons\";\r\n\r\nconst\r\n    socket = new Socket()\r\n;\r\n\r\nclass Drawing extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            lobbies: [],\r\n            maxOnline: 0,\r\n            minOnline: -1,\r\n            currentOnline: 0,\r\n            urlParams: getUrlParams(),\r\n            connected: false\r\n        };\r\n\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n        this.socket = socket;\r\n        bridge.send('VKWebAppInit');\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.connect();\r\n\r\n        socket.unsubscribe('gameStart', 'draw');\r\n\r\n        socket.subscribe('exit', r => {\r\n            console.log('Exit application', r);\r\n            this.setState({connected: false});\r\n        });\r\n        socket.onConnectionError((e) => {\r\n            console.log('Connection Error');\r\n            this.setState({connected: false});\r\n            setTimeout(() => {\r\n                this.connect();\r\n            }, 1000);\r\n        });\r\n        socket.onDisconnect(() => {\r\n            console.log('Disconnected');\r\n            this.setState({connected: false});\r\n        });\r\n\r\n        socket.subscribe('gameStart', async r => {\r\n            this.setState({lobbies: {...this.state.lobbies, [r.lobbyId]: {end: false}}});\r\n        });\r\n        socket.subscribe('gameEnd', async r => {\r\n            const {lobbyId, gameId, word, winnerId} = r;\r\n            if (this.state.lobbies[lobbyId]) {\r\n                this.setState({lobbies: {...this.state.lobbies, [lobbyId]: {end: true, word, gameId, winnerId}}});\r\n            }\r\n        });\r\n        socket.subscribe('draw', r => {\r\n            const {lobbyId, x0, y0, x1, y1, color} = r.data;\r\n            this.drawLine(lobbyId, x0, y0, x1, y1, color);\r\n        });\r\n        socket.subscribe('clear', r => {\r\n            if (this[`canvas${r.lobbyId}`])\r\n                this[`canvas${r.lobbyId}`].getContext('2d').clearRect(0, 0, 319, 319);\r\n        });\r\n\r\n        socket.subscribe('changeOnline', r => {\r\n            const {maxOnline, minOnline} = this.state;\r\n            this.setState({\r\n                maxOnline: Math.max(maxOnline, r.count),\r\n                minOnline: Math.min(minOnline < 0 ? r.count : minOnline, r.count),\r\n                currentOnline: r.count\r\n            });\r\n        });\r\n\r\n        socket.onConnect(async () => {\r\n            console.log('Connected');\r\n            this.setState({connected: true});\r\n            socket.call('games.joinGlobal');\r\n        })\r\n    }\r\n\r\n    connect() {\r\n        socket.connect('https://draw.avocado.special.vk-apps.com', getUrlParams());\r\n    }\r\n\r\n    drawLine(lobbyId, x0, y0, x1, y1, color) {\r\n        try {\r\n            const\r\n                canvas = this[`canvas${lobbyId}`],\r\n                canvasContext = canvas.getContext('2d')\r\n            ;\r\n\r\n            if (!canvas) return;\r\n            canvasContext.beginPath();\r\n            canvasContext.moveTo(x0, y0);\r\n            canvasContext.lineTo(x1, y1);\r\n            canvasContext.strokeStyle = color;\r\n            canvasContext.lineWidth = 2;\r\n            canvasContext.stroke();\r\n            canvasContext.closePath();\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const\r\n            {\r\n                urlParams,\r\n\r\n                lobbies,\r\n                popout,\r\n                maxOnline, minOnline, currentOnline,\r\n\r\n                manage_elements, view_games,\r\n\r\n                connected\r\n            } = this.state\r\n        ;\r\n\r\n        return (\r\n            <View\r\n                activePanel='global'\r\n                popout={popout}\r\n            >\r\n                <Panel id='global'>\r\n                    <PanelHeader separator={false}>\r\n                        Просмотр игр\r\n                    </PanelHeader>\r\n                    <AdaptivityProvider viewWidth={ViewWidth.MOBILE}>\r\n                        <div className='Stats'>\r\n                            <ModalCardBase\r\n                                style={{width: 320}}\r\n                                icon={<Icon56Users3Outline/>}\r\n                                header='Онлайн'\r\n                                subheader={\r\n                                    <span>Максимальный: {maxOnline}<br/>Минимальный: {minOnline}<br/>Текущий: {currentOnline}</span>}\r\n                                actions={\r\n                                    <Button size='l' onClick={() => {\r\n                                        if (connected) {\r\n                                            socket.getSocket().disconnect();\r\n                                        } else {\r\n                                            this.connect();\r\n                                        }\r\n                                    }}>\r\n                                        {connected ? 'Отключиться' : 'Подключиться'}\r\n                                    </Button>\r\n                                }\r\n                            />\r\n                            <ModalCardBase\r\n                                style={{width: 320}}\r\n                                icon={<Icon56PaletteOutline/>}\r\n                                header='Внешний вид'\r\n                                actionsLayout='vertical'\r\n                                actions={[\r\n                                    <Button\r\n                                        size='l'\r\n                                        mode='neutral'\r\n                                        after={\r\n                                            <Switch\r\n                                                getRef={ref => this.manage_elements_ref = ref}\r\n                                                onChange={() => this.setState({manage_elements: !manage_elements})}/>}\r\n                                        onClick={() => this.manage_elements_ref.click()}\r\n                                    >\r\n                                        Спрятать кнопки\r\n                                    </Button>,\r\n                                    <Button\r\n                                        size='l'\r\n                                        mode='neutral'\r\n                                        after={\r\n                                            <Switch\r\n                                                getRef={ref => this.view_games_ref = ref}\r\n                                                onChange={() => this.setState({view_games: !view_games})}/>}\r\n                                        onClick={() => this.view_games_ref.click()}\r\n                                    >\r\n                                        Спрятать игры\r\n                                    </Button>,\r\n                                ]}\r\n                            />\r\n                        </div>\r\n                    </AdaptivityProvider>\r\n                    <div className='CanvasGrid'>\r\n                        {\r\n                            Object.keys(lobbies).map((value, index) =>\r\n                                <div\r\n                                    style={{\r\n                                        display: view_games && 'none'\r\n                                    }}\r\n                                    key={`div__${index}`}\r\n                                    className='Canvas_Container'\r\n                                    onClick={() => {\r\n\r\n                                    }}\r\n                                >\r\n                                    {\r\n                                        lobbies[value].end && !manage_elements &&\r\n                                        <React.Fragment>\r\n                                            <h2>{lobbies[value].word.nom.substring(0, 1).toUpperCase() + lobbies[value].word.nom.substring(1)}</h2>\r\n                                            <Icon28ReportOutline fill={lobbies[value].isReported && '#efefef'}\r\n                                                                 className='Report' onClick={() => {\r\n                                                if (!lobbies[value].isReported) {\r\n                                                    socket.call('games.report', {game_id: lobbies[value].gameId});\r\n                                                    this.setState({\r\n                                                        lobbies: {\r\n                                                            ...this.state.lobbies,\r\n                                                            [value]: {...lobbies[value], isReported: true}\r\n                                                        }\r\n                                                    });\r\n                                                }\r\n                                            }}/>\r\n                                            <Icon24Like\r\n                                                fill={lobbies[value].isLiked ? '#F16384' : 'var(--color_secondary)'}\r\n                                                className='Like' onClick={() => {\r\n                                                socket.call('pictures.like', {game_id: lobbies[value].gameId}, r => {\r\n                                                    this.setState({\r\n                                                        lobbies: {\r\n                                                            ...this.state.lobbies,\r\n                                                            [value]: {...lobbies[value], isLiked: r.response.isLiked}\r\n                                                        }\r\n                                                    });\r\n                                                });\r\n                                            }}/>\r\n                                            {\r\n                                                urlParams.vk_user_id == 245481845 &&\r\n                                                <Button\r\n                                                    before={<Icon20AchievementCircleFillBlue width={16} height={16}/>}\r\n                                                    size='m' mode='gradient_blue'\r\n                                                    onClick={() => {\r\n                                                        socket.call('users.giveCreative', {\r\n                                                            user_id: lobbies[value].winnerId,\r\n                                                            status: !lobbies[value].gaveTag\r\n                                                        }, r => {\r\n                                                            this.setState({\r\n                                                                lobbies: {\r\n                                                                    ...this.state.lobbies,\r\n                                                                    [value]: {...lobbies[value], gaveTag: r.response}\r\n                                                                }\r\n                                                            });\r\n                                                        })\r\n                                                    }}\r\n                                                >\r\n                                                    {lobbies[value].gaveTag ? 'Забрать' : 'Выдать'} метку\r\n                                                </Button>\r\n                                            }\r\n                                        </React.Fragment>\r\n                                    }\r\n                                    <canvas id={lobbies[value].gameId ? `game_${lobbies[value].gameId}` : `lobby_${value}`} width={319} height={319} ref={ref => this[`canvas${value}`] = ref}/>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Panel>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Drawing;","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport '@vkontakte/vkui/dist/unstable.css'\nimport {AdaptivityProvider, AppRoot, ConfigProvider} from \"@vkontakte/vkui\";\n\nimport './css/Fonts.css';\nimport './css/Error.css';\nimport './css/Utils.css';\n\n//import App from './apps/Tracker';\n//import App from './apps/Wheel';\n//import App from './apps/MedicalCard';\n//import App from './apps/AskMe';\n//import App from './apps/LoveAnalysis';\n//import App from './apps/BattleStat';\n//import App from './apps/BattleStatCatalog';\n//import App from './apps/YearTest';\n//import App from './apps/IQTest';\n//import App from './apps/MvsW';\n//import App from './apps/DeathDate';\n//import App from './apps/DeathDate2';\n//import App from './apps/Slaves';\n//import App from './apps/VKTime';\n//import App from './apps/LikesStat';\n//import App from './apps/VKAccPrice';\n//import App from './apps/DateCelebrity';\n//import App from './apps/NameInCountry';\n//import App from './apps/AccKarma';\n//import App from './apps/AdvertisementApp';\n//import App from './apps/AdvertisementAppSite';\n//import App from './apps/ClickerBattle/ClickerBattle';\n//import App from './apps/Drawing/Drawing';\nimport App from './apps/Drawing/Global';\n//import App from './apps/RandomCooking';\n\n\nReactDOM.render(\n    false ?\n        <App/>\n        :\n        <ConfigProvider>\n            <AdaptivityProvider>\n                <AppRoot>\n                    <App/>\n                </AppRoot>\n            </AdaptivityProvider>\n        </ConfigProvider>, document.getElementById('root')\n);\n"],"sourceRoot":""}