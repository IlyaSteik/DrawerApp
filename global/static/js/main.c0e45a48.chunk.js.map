{"version":3,"sources":["js/utils.js","apps/Drawing/Global.js","js/socket.js","index.js"],"names":["getUrlParams","window","location","search","length","JSON","parse","decodeURI","substring","replace","socket","this","onConnect","bind","onDisconnect","onConnectionError","getSocket","callback","on","method","params","emit","event","events","removeAllListeners","url","query","connect","openSocket","path","transports","reconnection","Drawing","props","state","lobbies","hidden","maxOnline","minOnline","componentDidMount","bridge","send","unsubscribe","subscribe","r","console","log","e","setTimeout","a","setState","lobbyId","data","x0","y0","x1","y1","color","drawLine","getContext","clearRect","Math","max","count","min","call","canvas","canvasContext","beginPath","moveTo","lineTo","strokeStyle","lineWidth","stroke","closePath","popout","activePanel","id","separator","className","map","value","index","style","display","indexOf","key","onClick","width","height","ref","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0e45a48.chunk.js","sourcesContent":["import {default as bridge} from '@vkontakte/vk-bridge';\r\n\r\nexport function convertTextToLines(text, font, max_width) {\r\n    const\r\n        {createCanvas} = require('canvas'),\r\n        canvas = createCanvas(1080, 1920),\r\n        ctx = canvas.getContext('2d')\r\n    ;\r\n    ctx.font = font;\r\n    let width = 0, lines = [], result, i, j;\r\n\r\n    while (text.length) {\r\n        for (i = text.length; ctx.measureText(text.substr(0, i)).width > max_width; i--) ;\r\n        result = text.substr(0, i);\r\n\r\n        if (i !== text.length)\r\n\r\n            for (j = 0; result.indexOf(' ', j) !== -1; j = result.indexOf(' ', j) + 1) ;\r\n        lines.push(result.substr(0, j || result.length));\r\n\r\n        width = Math.max(width, ctx.measureText(lines[lines.length - 1]).width);\r\n        text = text.substr(lines[lines.length - 1].length, text.length);\r\n    }\r\n\r\n    return lines;\r\n}\r\n\r\nexport async function get(url, params) {\r\n    const\r\n        query = params ? '?' + Object.keys(params).map((value) =>\r\n            encodeURIComponent(value) + '=' + encodeURIComponent(params[value])\r\n        ).join('&') : '',\r\n        url_ = `${url}${query}`;\r\n    return await new Promise((res, rej) => {\r\n        fetch(url_, {method: 'GET'})\r\n            .then(res =>\r\n                res.json()\r\n            )\r\n            .then(answer =>\r\n                res(answer)\r\n            ).catch(err =>\r\n            res({error: {code: -1, text: err.toString()}})\r\n        );\r\n    });\r\n}\r\n\r\nexport const defaultFonts = [\r\n    'SF Pro Text',\r\n    'SF Pro Text Heavy',\r\n    'SF Pro Text Semibold',\r\n    'SF Pro Display',\r\n    'SF Pro Display Bold',\r\n    'SF Pro Display Semibold',\r\n    'SF Pro Display Medium',\r\n    'SF Pro Rounded',\r\n    'SF Pro Rounded Semibold',\r\n    'SF Pro Rounded Bold',\r\n    'SF UI Display',\r\n    'SF UI Text',\r\n    'TT Commons',\r\n    'TT Commons Bold',\r\n    'TT Commons Demibold',\r\n    'Manrope ExtraBold'\r\n];\r\n\r\nexport function loadFonts(fonts = defaultFonts) {\r\n    for (const font of fonts) {\r\n        const span = document.createElement('span');\r\n        span.style.fontFamily = font;\r\n        span.innerText = '.';\r\n        document.body.appendChild(span);\r\n        setTimeout(() => span.remove(), 1);\r\n    }\r\n}\r\n\r\nexport function animateValue(obj, start, end, duration) {\r\n    if (start === end || end - start === 1) {\r\n        obj.innerHTML = end;\r\n    } else {\r\n        let startTimestamp = null;\r\n        const step = (timestamp) => {\r\n            if (!startTimestamp) startTimestamp = timestamp;\r\n            const progress = Math.min((timestamp - startTimestamp) / duration, 1);\r\n            obj.innerHTML = Math.floor(progress * (end - start) + start);\r\n            if (progress < 1) {\r\n                window.requestAnimationFrame(step);\r\n            }\r\n        };\r\n        window.requestAnimationFrame(step);\r\n    }\r\n}\r\n\r\nexport function cps(array) {\r\n    if (array.length !== 0) {\r\n        let\r\n            first_date = array[0],\r\n            cur_pos = 0,\r\n            clicks_per_second = []\r\n        ;\r\n        array = array.map(value => value - first_date);\r\n\r\n        for (const click of array) {\r\n            cur_pos = click < 1000 ? 0 : parseInt((click + '').substring(0, (click + '').length - 3));\r\n            clicks_per_second[cur_pos] = clicks_per_second[cur_pos] > 0 ? clicks_per_second[cur_pos] + 1 : 1;\r\n        }\r\n\r\n        clicks_per_second = clicks_per_second.filter(value => value > 0);\r\n\r\n        const\r\n            max_cps = Math.max(...clicks_per_second),\r\n            min_cps = Math.min(...clicks_per_second),\r\n            mid_cps = Math.ceil((max_cps + min_cps) / 2)\r\n        ;\r\n        return {max_cps, min_cps, mid_cps};\r\n    } else {\r\n        return {max_cps: 0, min_cps: 0, mid_cps: 0};\r\n    }\r\n}\r\n\r\nfunction componentToHex(c) {\r\n    const hex = c.toString(16);\r\n    return hex.length == 1 ? '0' + hex : hex;\r\n}\r\n\r\nexport function rgbToHex(r, g, b) {\r\n    return '#' + componentToHex(r) + componentToHex(g) + componentToHex(b);\r\n}\r\n\r\nexport function sleep(ms) {\r\n    return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n\r\nexport function decOfNum(number, titles, needNumber = true) {\r\n    if (number !== undefined) {\r\n        let decCache = [],\r\n            decCases = [2, 0, 1, 1, 1, 2];\r\n        if (!decCache[number]) decCache[number] = number % 100 > 4 && number % 100 < 20 ? 2 : decCases[Math.min(number % 10, 5)];\r\n        return (needNumber ? number + ' ' : '') + titles[decCache[number]];\r\n    }\r\n}\r\n\r\nexport function numToStr(number) {\r\n    if (number > 0 && number <= 10) {\r\n        const words = [\r\n            'первое', 'второе', 'третье', 'четвертое', 'пятое', 'шестое', 'седьмое', 'восьмое', 'девятое', 'десятое'\r\n        ];\r\n        return words[number - 1];\r\n    } else {\r\n        return number + '';\r\n    }\r\n}\r\n\r\nexport function shortIntegers(int) {\r\n    try {\r\n        return int.toString().replace(/(\\d)(?=(\\d\\d\\d)+([^\\d]|$))/g, '$1 ');\r\n    } catch (e) {\r\n        return 0;\r\n    }\r\n}\r\n\r\nexport function getRandomInt(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport function getRandomInts(min, max, count) {\r\n    const array = [];\r\n    for (let i = 0; i < count; i++) {\r\n        const int = getRandomInt(min, max);\r\n        if (array.indexOf(int) === -1) {\r\n            array.push(int);\r\n        } else {\r\n            if (max >= count)\r\n                i--;\r\n            else\r\n                array.push(int);\r\n        }\r\n    }\r\n    return array;\r\n}\r\n\r\nexport function nodeToString(node) {\r\n    let tmpNode = document.createElement(\"div\");\r\n    tmpNode.appendChild(node.cloneNode(true));\r\n    let str = tmpNode.innerHTML;\r\n    tmpNode = node = null;\r\n    return str;\r\n}\r\n\r\nexport function convertMiliseconds(miliseconds) {\r\n    let hours, minutes, total_hours, total_minutes, total_seconds;\r\n\r\n    total_seconds = parseInt(Math.floor(miliseconds / 1000));\r\n    total_minutes = parseInt(Math.floor(total_seconds / 60));\r\n    total_hours = parseInt(Math.floor(total_minutes / 60));\r\n\r\n    minutes = parseInt(total_minutes % 60);\r\n    hours = parseInt(total_hours % 24);\r\n\r\n    return hours + 'ч. ' + minutes + 'мин.';\r\n}\r\n\r\nexport function convertMsToNormalTime(miliseconds) {\r\n    let hours, minutes, seconds, total_hours, total_minutes, total_seconds;\r\n\r\n    total_seconds = parseInt(Math.floor(miliseconds / 1000));\r\n    total_minutes = parseInt(Math.floor(total_seconds / 60));\r\n    total_hours = parseInt(Math.floor(total_minutes / 60));\r\n\r\n    seconds = parseInt(total_seconds % 60);\r\n    minutes = parseInt(total_minutes % 60);\r\n    hours = parseInt(total_hours % 24);\r\n\r\n    return {hours, minutes, seconds};\r\n}\r\n\r\nconst getImage = (src) =>\r\n    new Promise((res, rej) => {\r\n        const image = new Image();\r\n\r\n        image.onload = () => res(image);\r\n        image.crossOrigin = 'anonymous';\r\n        image.onstalled = (e) => {\r\n            console.log('Failed to fetch data, but trying.', e);\r\n            rej(e);\r\n        };\r\n        image.onerror = (e) => {\r\n            console.log('Failed to fetch data, error.', e);\r\n            rej(e);\r\n        };\r\n        image.src = src;\r\n    });\r\n\r\nexport async function toBlob(object, dataUrl = true) {\r\n    const\r\n        myCanvas = document.createElement('canvas'),\r\n        ctxt = myCanvas.getContext('2d');\r\n\r\n    let base = typeof object === 'string' ? object : window.btoa(object);\r\n    const img = await getImage(typeof object === 'string' ? base : `data:image/svg+xml;base64,${base}`);\r\n    myCanvas.height = img.height;\r\n    myCanvas.width = img.width;\r\n    if (ctxt === null) {\r\n        return \"\";\r\n    }\r\n    ctxt.drawImage(img, 0, 0, img.width, img.height);\r\n    return dataUrl ? myCanvas.toDataURL() : myCanvas;\r\n}\r\n\r\nexport function getUrlParams() {\r\n    return window.location.search.length > 0 && JSON.parse('{\"' + decodeURI(window.location.search.substring(1)).replace(/\"/g, '\\\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}');\r\n}\r\n\r\nexport const platforms = {\r\n    desktop_web: /desktop_web/g,\r\n    mobile_android: /mobile_android/g,\r\n    mobile_android_messenger: /mobile_android_messenger/g,\r\n    mobile_ipad: /mobile_ipad/g,\r\n    mobile_iphone: /mobile_iphone/g,\r\n    mobile_iphone_messenger: /mobile_iphone_messenger/g,\r\n    mobile_web: /mobile_web/g,\r\n\r\n    android: /mobile_android|mobile_android_messenger/g,\r\n    ios: /mobile_ipad|mobile_iphone|mobile_iphone_messenger/g\r\n};\r\n\r\nexport function isPlatformIOS() {\r\n    return getUrlParams().vk_platform === 'mobile_iphone';\r\n}\r\n\r\nexport function isPlatformAndroid() {\r\n    return platforms.android.test(getUrlParams().vk_platform);\r\n}\r\n\r\nexport function isPlatformDesktop() {\r\n    return getUrlParams().vk_platform === 'desktop_web';\r\n}\r\n\r\nexport let\r\n    vk_local_users = {},\r\n    name_cases = ['first_name', 'last_name', 'first_name_dat', 'first_name_nom', 'first_name_gen', 'first_name_acc', 'first_name_ins', 'first_name_abl', 'last_name_dat', 'last_name_nom', 'last_name_gen', 'last_name_acc', 'last_name_ins', 'last_name_abl']\r\n;\r\n\r\nexport async function getVKUsers(ids) {\r\n    const\r\n        user_ids = [\r\n            ...new Set(\r\n                ids\r\n                    .filter(value => vk_local_users[value] === undefined)\r\n                    .map(\r\n                        value => typeof value === 'number' ? value : value.replace('@', '')\r\n                            .replace('id', '')\r\n                            .replace('vk.com/', '')\r\n                            .replace('http://', '')\r\n                            .replace('https://', '')\r\n                    )\r\n            )\r\n        ],\r\n        i = Math.floor(user_ids.length / 100)\r\n    ;\r\n\r\n    if (user_ids.length > 0) {\r\n        let users = [];\r\n\r\n        for (let j = 0; j < i + 1; j++) {\r\n            users = users.concat(\r\n                await vkApiRequest('users.get', {\r\n                    user_ids: user_ids.slice(j * 100, j * 100 + 100).join(','),\r\n                    fields: ['screen_name', 'photo_100', 'photo_200', 'photo_max_orig', 'sex', ...name_cases].join(',')\r\n                })\r\n            );\r\n        }\r\n\r\n        for (const user of users) {\r\n            vk_local_users[user.id] = user;\r\n        }\r\n    }\r\n\r\n    return ids.map(value => vk_local_users[value] || vk_local_users[Object.keys(vk_local_users).find(key => vk_local_users[key].screen_name === value)]);\r\n}\r\n\r\nexport async function vkApiRequest(method, params = {}) {\r\n    return (await bridge.send('VKWebAppCallAPIMethod', {\r\n        method,\r\n        params: {\r\n            ...params,\r\n            v: '5.126',\r\n            access_token: params.access_token\r\n        }\r\n    })).response\r\n}\r\n\r\nexport function viewportToPixels(value) {\r\n    const\r\n        parts = value.match(/([0-9\\.]+)(vh|vw)/),\r\n        q = Number(parts[1]),\r\n        side = window[['innerHeight', 'innerWidth'][['vh', 'vw'].indexOf(parts[2])]]\r\n    ;\r\n    return side * (q / 100)\r\n}\r\n\r\nexport function openUrl(url) {\r\n    const element = document.createElement('a');\r\n    element.href = url;\r\n    element.target = '_blank';\r\n    element.click();\r\n    element.remove();\r\n}\r\n\r\nexport function getUrlLocation() {\r\n    return window.location.origin + window.location.pathname.replace('/index.html', '');\r\n}\r\n\r\nexport function getSrcUrl(resource) {\r\n    return getUrlLocation() + resource.substring(1);\r\n}\r\n\r\nexport async function getBase64Image(imageUri) {\r\n    const\r\n        canvas = document.createElement('canvas'),\r\n        ctx = canvas.getContext('2d'),\r\n        img = new Image()\r\n    ;\r\n    img.src = 'https://murmuring-bastion-20764.herokuapp.com/' + imageUri;\r\n    img.crossOrigin = 'Anonymous';\r\n    return await new Promise(resolve =>\r\n        img.onload = function () {\r\n            canvas.width = this.width;\r\n            canvas.height = this.height;\r\n            ctx.drawImage(img, 0, 0, this.width, this.height);\r\n            resolve(canvas.toDataURL('image/png'));\r\n        }\r\n    );\r\n}","import React from 'react';\r\nimport bridge from '@vkontakte/vk-bridge';\r\nimport '../../css/Drawing/Global.css';\r\n\r\nimport {getUrlParams} from \"../../js/utils\";\r\nimport {\r\n    Panel,\r\n    View, PanelHeader, ActionSheet, ActionSheetItem\r\n} from '@vkontakte/vkui';\r\n\r\nimport Socket from '../../js/socket';\r\n\r\nconst\r\n    socket = new Socket()\r\n;\r\n\r\nclass Drawing extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            lobbies: [],\r\n            hidden: [],\r\n            maxOnline: 0,\r\n            minOnline: 0\r\n        };\r\n\r\n        this.componentDidMount = this.componentDidMount.bind(this);\r\n        this.socket = socket;\r\n        bridge.send('VKWebAppInit');\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.connect();\r\n\r\n        socket.unsubscribe('gameStart', 'draw');\r\n\r\n        socket.subscribe('exit', r => {\r\n            console.log('Exit application', r);\r\n        });\r\n        socket.onConnectionError((e) => {\r\n            console.log('Connection Error');\r\n            setTimeout(() => {\r\n                this.connect();\r\n            }, 1000);\r\n        });\r\n        socket.onDisconnect(() => {\r\n            console.log('Disconnected');\r\n        });\r\n\r\n        socket.subscribe('gameStart', async r => {\r\n            this.setState({lobbies: [...this.state.lobbies, r.lobbyId]});\r\n        });\r\n        socket.subscribe('draw', r => {\r\n            const {lobbyId, x0, y0, x1, y1, color} = r.data;\r\n            this.drawLine(lobbyId, x0, y0, x1, y1, color);\r\n        });\r\n        socket.subscribe('clear', r => {\r\n            if (this[`canvas${r.lobbyId}`])\r\n                this[`canvas${r.lobbyId}`].getContext('2d').clearRect(0, 0, 319, 319);\r\n        });\r\n\r\n        socket.subscribe('changeOnline', r => {\r\n            const {maxOnline, minOnline} = this.state;\r\n            this.setState({\r\n                maxOnline: Math.max(maxOnline, r.count),\r\n                minOnline: Math.min(minOnline, r.count)\r\n            });\r\n        });\r\n\r\n        socket.onConnect(async () => {\r\n            console.log('Connected');\r\n            socket.call('games.joinGlobal');\r\n        })\r\n    }\r\n\r\n    connect() {\r\n        socket.connect('https://draw.avocado.special.vk-apps.com', getUrlParams());\r\n    }\r\n\r\n    drawLine(lobbyId, x0, y0, x1, y1, color) {\r\n        try {\r\n            const\r\n                canvas = this[`canvas${lobbyId}`],\r\n                canvasContext = canvas.getContext('2d')\r\n            ;\r\n\r\n            if (!canvas) return;\r\n            canvasContext.beginPath();\r\n            canvasContext.moveTo(x0, y0);\r\n            canvasContext.lineTo(x1, y1);\r\n            canvasContext.strokeStyle = color;\r\n            canvasContext.lineWidth = 2;\r\n            canvasContext.stroke();\r\n            canvasContext.closePath();\r\n        } catch (e) {\r\n\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const\r\n            {\r\n                lobbies, hidden,\r\n                popout\r\n            } = this.state\r\n        ;\r\n\r\n        return (\r\n            <View\r\n                activePanel='global'\r\n                popout={popout}\r\n            >\r\n                <Panel id='global'>\r\n                    <PanelHeader separator={false}>\r\n                        Текущие игры\r\n                    </PanelHeader>\r\n                    <div className='CanvasGrid'>\r\n                        {\r\n                            lobbies.map((value, index) =>\r\n                                <div\r\n                                    style={{\r\n                                        display: hidden.indexOf(value) > -1 && 'none'\r\n                                    }}\r\n                                    key={`div__${index}`}\r\n                                    className='Canvas_Container'\r\n                                    onClick={() => {\r\n                                        this.setState({hidden: [...hidden, value]});\r\n                                    }}\r\n                                >\r\n                                    <canvas width={319} height={319} ref={ref => this[`canvas${value}`] = ref}/>\r\n                                </div>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Panel>\r\n            </View>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Drawing;","import openSocket from \"socket.io-client\";\r\n\r\nclass Socket {\r\n    constructor() {\r\n        this.onConnect = this.onConnect.bind(this);\r\n        this.onDisconnect = this.onDisconnect.bind(this);\r\n        this.onConnectionError = this.onConnectionError.bind(this);\r\n        this.getSocket = this.getSocket.bind(this);\r\n    }\r\n\r\n    onConnect(callback) {\r\n        this.socket.on('connect', callback);\r\n    }\r\n\r\n    onDisconnect(callback) {\r\n        this.socket.on('disconnect', callback);\r\n    }\r\n\r\n    onConnectionError(callback) {\r\n        this.socket.on('connect_error', callback);\r\n    }\r\n\r\n    call(method, params, callback) {\r\n        this.socket.emit(method, params, callback);\r\n    }\r\n\r\n    subscribe(event, callback) {\r\n        this.socket.on(event, callback);\r\n    }\r\n\r\n    unsubscribe(...events) {\r\n        for (const event of events) {\r\n            this.socket.removeAllListeners(event);\r\n        }\r\n    }\r\n\r\n    connect(url, query) {\r\n        if (this.socket) {\r\n            this.socket.connect();\r\n        } else {\r\n            this.socket = openSocket.connect(url, {\r\n                path: '/socket.io',\r\n                query,\r\n                transports: ['websocket', 'polling', 'flashsocket'],\r\n                reconnection: false\r\n            });\r\n        }\r\n    }\r\n\r\n    getSocket() {\r\n        return this.socket;\r\n    }\r\n}\r\n\r\nexport default Socket;","import 'core-js/features/map';\nimport 'core-js/features/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@vkontakte/vkui/dist/vkui.css';\nimport '@vkontakte/vkui/dist/unstable.css'\nimport {AdaptivityProvider, AppRoot, ConfigProvider} from \"@vkontakte/vkui\";\n\nimport './css/Fonts.css';\nimport './css/Error.css';\nimport './css/Utils.css';\n\n//import App from './apps/Tracker';\n//import App from './apps/Wheel';\n//import App from './apps/MedicalCard';\n//import App from './apps/AskMe';\n//import App from './apps/LoveAnalysis';\n//import App from './apps/BattleStat';\n//import App from './apps/BattleStatCatalog';\n//import App from './apps/YearTest';\n//import App from './apps/IQTest';\n//import App from './apps/MvsW';\n//import App from './apps/DeathDate';\n//import App from './apps/DeathDate2';\n//import App from './apps/Slaves';\n//import App from './apps/VKTime';\n//import App from './apps/LikesStat';\n//import App from './apps/VKAccPrice';\n//import App from './apps/DateCelebrity';\n//import App from './apps/NameInCountry';\n//import App from './apps/AccKarma';\n//import App from './apps/AdvertisementApp';\n//import App from './apps/AdvertisementAppSite';\n//import App from './apps/ClickerBattle/ClickerBattle';\n//import App from './apps/Drawing/Drawing';\nimport App from './apps/Drawing/Global';\n//import App from './apps/RandomCooking';\n\n\nReactDOM.render(\n    false ?\n        <App/>\n        :\n        <ConfigProvider>\n            <AdaptivityProvider>\n                <AppRoot>\n                    <App/>\n                </AppRoot>\n            </AdaptivityProvider>\n        </ConfigProvider>, document.getElementById('root')\n);\n"],"sourceRoot":""}